/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import datapackage.DataStore;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Hospital;
import model.User;

/**
 *
 * @author hp
 */
public class HospitalAdminJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalAdminJPanel
     */
    private int HOSPITAL_INDEX_TO_UPDATE_DELETE = -1;
    private DefaultTableModel Hospital_table;
    private boolean HOSPITAL_SCREEN_TABLE_MOUSE_LISTENER_STATUS = false;
    public HospitalAdminJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblHosId = new javax.swing.JLabel();
        lblHosName = new javax.swing.JLabel();
        lblHosAddr = new javax.swing.JLabel();
        lblHosCity = new javax.swing.JLabel();
        lblHosPin = new javax.swing.JLabel();
        lblHosComm = new javax.swing.JLabel();
        lblHosAdmin = new javax.swing.JLabel();
        lblHosAdminUName = new javax.swing.JLabel();
        lblHosAdminPassword = new javax.swing.JLabel();
        btnAddHos = new javax.swing.JButton();
        txtHosId = new javax.swing.JTextField();
        txtHosName = new javax.swing.JTextField();
        txtHosAddr = new javax.swing.JTextField();
        txtHosCity = new javax.swing.JTextField();
        txtHosPin = new javax.swing.JTextField();
        txtHosAdminName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHosDetails = new javax.swing.JTable();
        cmbHosComm = new javax.swing.JComboBox<>();
        txtAdminPassword = new javax.swing.JPasswordField();

        setMaximumSize(new java.awt.Dimension(1300, 700));
        setPreferredSize(new java.awt.Dimension(1300, 700));

        lblTitle.setText("Hospital");

        lblHosId.setText("Hospital ID:");

        lblHosName.setText("Hospital Name:");

        lblHosAddr.setText("Hospital Address:");

        lblHosCity.setText("Hospital City:");

        lblHosPin.setText("Hospital Pincode:");

        lblHosComm.setText("Hospital Community:");

        lblHosAdmin.setText("Add Hospital Admin");

        lblHosAdminUName.setText("Admin User Name:");

        lblHosAdminPassword.setText("Admin Password:");

        btnAddHos.setText("Add");
        btnAddHos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHosActionPerformed(evt);
            }
        });

        tblHosDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Admin Name", "City", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHosDetails);

        cmbHosComm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "Allston", "Waltham" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHosName)
                            .addComponent(lblHosId)
                            .addComponent(lblHosAddr)
                            .addComponent(lblHosCity)
                            .addComponent(lblHosPin)
                            .addComponent(lblHosComm))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHosId, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHosName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHosAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHosCity, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHosPin, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbHosComm, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtHosAdminName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHosAdminUName)
                                    .addComponent(lblHosAdminPassword))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblHosAdmin)
                                            .addComponent(btnAddHos)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(txtAdminPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAdminPassword, txtHosAdminName});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHosId)
                            .addComponent(txtHosId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHosName)
                            .addComponent(txtHosName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHosAddr)
                            .addComponent(txtHosAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHosCity)
                            .addComponent(txtHosCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHosPin)
                            .addComponent(txtHosPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHosComm)
                            .addComponent(cmbHosComm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblHosAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHosAdminUName)
                            .addComponent(txtHosAdminName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHosAdminPassword)
                            .addComponent(txtAdminPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addComponent(btnAddHos))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(221, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddHosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHosActionPerformed
        // TODO add your handling code here:
        Hospital hos = new Hospital();
        hos.setHospitalUnqID(DataStore.generateUnqID());
        hos.setHospitalID(txtHosId.getText().trim());
        hos.setHospitalName(txtHosName.getText().trim());
        hos.setHospitalAddress(txtHosAddr.getText().trim());
        hos.setCityName(txtHosCity.getText().trim());
        hos.setHospitalPincode(txtHosPin.getText().trim());
        hos.setHospitalCommunity(cmbHosComm.getSelectedItem().toString().trim());
        hos.setAdminusername(txtHosAdminName.getText().trim());
        hos.setAdminpassword(new String(txtAdminPassword.getPassword()).trim());
        DataStore.HospitalArrayList.add(hos);
        System.out.println(hos);
        
        User user = new User();
        
        user.setUnqId(DataStore.generateUnqID());
        user.setId(txtHosAdminName.getText().trim());
        user.setPassword(new String(txtAdminPassword.getPassword()).trim());
        user.setRole("HOSPITAL");
        
        DataStore.userArrayList.add(user);
        
        System.out.println(user);
        initSuperUserAddHospitalScreen(DataStore.HospitalArrayList);
    }//GEN-LAST:event_btnAddHosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddHos;
    private javax.swing.JComboBox<String> cmbHosComm;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHosAddr;
    private javax.swing.JLabel lblHosAdmin;
    private javax.swing.JLabel lblHosAdminPassword;
    private javax.swing.JLabel lblHosAdminUName;
    private javax.swing.JLabel lblHosCity;
    private javax.swing.JLabel lblHosComm;
    private javax.swing.JLabel lblHosId;
    private javax.swing.JLabel lblHosName;
    private javax.swing.JLabel lblHosPin;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblHosDetails;
    private javax.swing.JPasswordField txtAdminPassword;
    private javax.swing.JTextField txtHosAddr;
    private javax.swing.JTextField txtHosAdminName;
    private javax.swing.JTextField txtHosCity;
    private javax.swing.JTextField txtHosId;
    private javax.swing.JTextField txtHosName;
    private javax.swing.JTextField txtHosPin;
    // End of variables declaration//GEN-END:variables

    private void initSuperUserAddHospitalScreen(ArrayList<Hospital> HospitalArrayList) {
        if (DataStore.ROLE.equals("COMMUNITY_ADMIN") && DataStore.USR_ID.equals("boston_admin"))
        {
            cmbHosComm.removeAllItems();
            cmbHosComm.addItem("Boston");
        }else if(DataStore.ROLE.equals("COMMUNITY_ADMIN") && DataStore.USR_ID.equals("allston_admin"))
        {
            cmbHosComm.removeAllItems();
            cmbHosComm.addItem("Allston");
        }else if(DataStore.ROLE.equals("COMMUNITY_ADMIN") && DataStore.USR_ID.equals("waltham_admin"))
        {
            cmbHosComm.removeAllItems();
            cmbHosComm.addItem("Waltham");
        }
        HOSPITAL_INDEX_TO_UPDATE_DELETE = -1;
//        superAdminDashboardScreen_DeleteUpdatePanel.setVisible(false);
        txtHosId.setText("");
        txtAdminPassword.setText("");
        txtHosName.setText("");
        txtHosAddr.setText("");
        txtHosCity.setText("");
        txtHosPin.setText("");
        txtHosAdminName.setText("");
        cmbHosComm.setSelectedIndex(0);
        Hospital_table = new DefaultTableModel(new String[]{"#", "ID", "Name", "City", "Pincode"}, 0);
        tblHosDetails.setModel(Hospital_table);
        
        if (!HospitalArrayList.isEmpty()) {
//            showAddHospitalElements();
            setDataOnAllHospitalsTable("viewAllHospitalsTable", Hospital_table, HospitalArrayList, tblHosDetails);
        }
    }
    
    private void setDataOnAllHospitalsTable(String tableNameToSet, DefaultTableModel defaultTableModel, ArrayList<Hospital> tableDataArrayList, JTable table) {
        table.setName(tableNameToSet);
        table.setPreferredSize(null);

        switch (table.getName()) {
            case "viewAllHospitalsTable" -> {
                for (int i = 0; i < tableDataArrayList.size(); i++) {
                    
                    if (DataStore.ROLE.equals("COMMUNITY_ADMIN") && DataStore.USR_ID.equals("boston_admin"))
                    {
                           if (tableDataArrayList.get(i).getHospitalCommunity().equals("Boston"))
                           {
                        defaultTableModel.addRow(new String[]{String.valueOf(i + 1),
                        tableDataArrayList.get(i).getHospitalID(),
                        tableDataArrayList.get(i).getHospitalName(),
                        tableDataArrayList.get(i).getCityName(),
                        String.valueOf(tableDataArrayList.get(i).getHospitalPincode())
                    });
                           }
                    }
                    else if (DataStore.ROLE.equals("COMMUNITY_ADMIN") && DataStore.USR_ID.equals("allston_admin"))
                    {
                    if (tableDataArrayList.get(i).getHospitalCommunity().equals("Mountain View"))
                           {
                        defaultTableModel.addRow(new String[]{String.valueOf(i + 1),
                        tableDataArrayList.get(i).getHospitalID(),
                        tableDataArrayList.get(i).getHospitalName(),
                        tableDataArrayList.get(i).getCityName(),
                        String.valueOf(tableDataArrayList.get(i).getHospitalPincode())
                    });                  
                           }
                    }
                    else if (DataStore.ROLE.equals("COMMUNITY_ADMIN") && DataStore.USR_ID.equals("waltham_admin"))
                    {
                    if (tableDataArrayList.get(i).getHospitalCommunity().equals("Mountain View"))
                           {
                        defaultTableModel.addRow(new String[]{String.valueOf(i + 1),
                        tableDataArrayList.get(i).getHospitalID(),
                        tableDataArrayList.get(i).getHospitalName(),
                        tableDataArrayList.get(i).getCityName(),
                        String.valueOf(tableDataArrayList.get(i).getHospitalPincode())
                    });                  
                           }
                    }                    
                    else {
                                            defaultTableModel.addRow(new String[]{String.valueOf(i + 1),
                        tableDataArrayList.get(i).getHospitalID(),
                        tableDataArrayList.get(i).getHospitalName(),
                        tableDataArrayList.get(i).getCityName(),
                        String.valueOf(tableDataArrayList.get(i).getHospitalPincode())
                    });   
                    }
                    
  
                
                
                }
                defaultTableModel.fireTableDataChanged();
                table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                table.getColumnModel().getColumn(0).setPreferredWidth(5);
                table.getColumnModel().getColumn(1).setPreferredWidth(5);
                table.getColumnModel().getColumn(2).setPreferredWidth(120);
                table.getColumnModel().getColumn(3).setPreferredWidth(30);
                table.getColumnModel().getColumn(4).setPreferredWidth(30);
                
                if (!HOSPITAL_SCREEN_TABLE_MOUSE_LISTENER_STATUS){
                table.addMouseListener(new MouseAdapter() {
                    
                public void mousePressed(MouseEvent mouseEvent) {
                    JTable table = (JTable) mouseEvent.getSource();
                    if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
                        Hospital hospitalToSelect = tableDataArrayList.get(table.getSelectedRow());
                            txtHosId.setText(hospitalToSelect.getHospitalID());
                            txtAdminPassword.setText(hospitalToSelect.getAdminpassword());
                            txtHosName.setText(hospitalToSelect.getHospitalName());
                            txtHosAddr.setText(hospitalToSelect.getHospitalAddress());
                            txtHosCity.setText(hospitalToSelect.getCityName());
                            txtHosPin.setText(String.valueOf(hospitalToSelect.getHospitalPincode()));
                            cmbHosComm.setSelectedItem(hospitalToSelect.getHospitalCommunity());
                            System.out.println("item is " + hospitalToSelect.getHospitalCommunity());
                            HOSPITAL_INDEX_TO_UPDATE_DELETE = getHospitalIndexAccordingToHospitalID(tableDataArrayList.get(table.getSelectedRow()).getHospitalID());
//                            HOSPITAL_INDEX_TO_UPDATE_DELETE = table.getSelectedRow();
                            System.out.println("index " + HOSPITAL_INDEX_TO_UPDATE_DELETE);
                            HOSPITAL_SCREEN_TABLE_MOUSE_LISTENER_STATUS = true;
//                            superAdminDashboardScreen_DeleteUpdatePanel.setVisible(true);
                            table.clearSelection();
                    }
                }
            }); }
                
            }
//            case "Person_Screen_AllHospitalsTable" -> {
//                                   for (int i = 0; i < tableDataArrayList.size(); i++) {
//                    defaultTableModel.addRow(new String[]{String.valueOf(i + 1),
//                        tableDataArrayList.get(i).getHospitalID(),
//                        tableDataArrayList.get(i).getHospitalName(),
//                        tableDataArrayList.get(i).getHospitalCity(),
//                        String.valueOf(tableDataArrayList.get(i).getHospitalPincode())
//                    });
//                }
//                defaultTableModel.fireTableDataChanged();
//                table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
//                table.getColumnModel().getColumn(0).setPreferredWidth(5);
//                table.getColumnModel().getColumn(1).setPreferredWidth(5);
//                table.getColumnModel().getColumn(2).setPreferredWidth(120);
//                table.getColumnModel().getColumn(3).setPreferredWidth(30);
//                table.getColumnModel().getColumn(4).setPreferredWidth(30);
//            table.addMouseListener(new MouseAdapter() {
//                public void mousePressed(MouseEvent mouseEvent) {
//                    JTable table = (JTable) mouseEvent.getSource();
//                    if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
//                        Hospital hospitalToSelect = tableDataArrayList.get(table.getSelectedRow());
//                        if (!hospitalToSelect.getWorkingdoctorsArrayList().isEmpty()){
//                        autofillPatientRegistrationDetails(hospitalToSelect);
//
//                        }
//                        else{
//                        JOptionPane.showMessageDialog(null, "No doctors found in this hospital. Choose another hospital.");
//                        }
//                    }
//                }
//            });
//            }

        }
    }
    private int getHospitalIndexAccordingToHospitalID(String hospitalID)
    {
            for (int i = 0; i < DataStore.HospitalArrayList.size(); i++)
        {
        if (hospitalID.equals(DataStore.HospitalArrayList.get(i).getHospitalID()))
        {
            return i;
        }

        }
        return -1;
    }
}
